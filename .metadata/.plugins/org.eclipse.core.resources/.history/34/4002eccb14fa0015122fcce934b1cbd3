/**
 * 
 */
package com.frankstar.Thread;

/**
 * @author frankstar
 * 生产者－消费者问题
 * 1.共享数据的不一致性／临界资源的保护
 * 2.java对象锁的概念
 * 3.synchronized关键字/wait() notify()
 */
public class ProducerConsumer {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
class SyncStack {
	//支持多线程同步操作的堆栈实现
	private int index = 0;
	private char []data = new char[6];
	public synchronized void push (char c) {
		if (index == data.length) {
			try {
				this.wait();
			} catch (InterruptedException e) {}
		}
		this.notify();
		data[index] = c;
		index++;
	}
	public synchronized char pop() {
		if (index == 0) {
			try {
				this.wait();
			} catch (InterruptedException e) {}
		}
		this.notify();
		index--;
		return data[index];
		return 0;
		
		
	}
}