/**
 * 
 */
package com.frankstar.sort;

/**
 * @author frankstar
 * 思想：每步将一个待排序的记录，按其顺序码大小插入到前面已经排序的字序列的合适位置，直到全部插入完毕
 * 直接插入排序：从后向前找到合适的位置插入
 * 二分插入排序
 * 希尔排序
 */
public class InsetSort {
	
	private static int[] arr = {49,38,65,97,76,13,27,49,78,34,12,64,1};
	public static void directInsertSort(int[] arr) {
		System.out.println("排序前的数组为：");
		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + " ");
		}
		//直接插入排序
		for (int i = 1; i < arr.length; i++) {
			//待插入元素
			int temp = arr[i];
			int j;
			for (j = i-1; j >= 0; j--){
				//将大于temp的往后移一位
				if (arr[j] > temp){
					arr[j+1] = arr[j];
				} else {
					break;
				}
			}
			arr[j+1] = temp;
		}
		System.out.println();
		System.out.println("排序后：");
		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + " ");
		}
	}
	public static void binaryInsertSort(int[] arr) {
		//按二分法找到合适的位置插入 可以减少比较的次数
		System.out.println("排序前：");
		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + " ");
		}
		for (int i = 0; i < arr.length; i++) {
			int temp = arr[i];
			int left = 0;
			int right = i - 1;
			int middle = 0;
			while (left <= right) {
				middle = (left + right)/2; //折中，取中间位置
				if (temp < arr[middle]) { //判断要插入的元素和中间元素的大小
					right = middle - 1; //中间元素大，最高位置取当前中间位置的前一位，重新再求中间位置
				} else {
					left = middle + 1; //中间位置小，最低位置取当前中间位置的后一位，重新再求中间位置
				}
			}
//			System.out.println();
//			System.out.println("left:" + left + "\tmiddle:" + middle + "\t" + "right:" + right);
			for ( int j = i-1; j > right; j--) {//将right＋1~i的所有元素后移一位
				arr[j+1] = arr[j]; 
			}
			arr[left] = temp;
		}
		System.out.println();
		System.out.println("排序后：");
		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + " ");
		}
		
	}
	//希尔排序 : 先取一个小于N的整数d1作为第一个增量，把文件的全部记录分成的
	//d1个组，所有距离为d1的倍数的记录放在同一个组中，先在各个组中进行直接插入排序；
	//然后取第二个增量d2<d1重复上述的分组和排序，直至所取的增量dt=1(dt<dt-1<...<d2<d1)
	//即所有的记录放在同一组中进行直接插入排序为止，实质上是分组插入排序
	public static void hillInsertSort(int[] arr) {
		System.out.println("排序前：");
		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + " ");
		}
		int d = arr.length;
		while (true) {
			d = d/2;
			for (int i = 0; i < d; i++) {
				for (int j = i+d; j < arr.length; j=j+d) {
					int temp = arr[j];
					int k;
					for (k = j-d; k >= 0 && arr[k] > temp;k = k-d){
						arr[k+d] = arr[k];
					}
					arr[k+d] = temp;
				}
			}
			if (d == 1) {
				break;
			}
		}
		System.out.println();
		System.out.println("排序之后：");
		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + " ");
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		directInsertSort(InsetSort.arr);
		binaryInsertSort(InsetSort.arr);

	}

}
